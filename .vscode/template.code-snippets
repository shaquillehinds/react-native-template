{
  "Debug Logger": {
    "prefix": "deb",
    "body": [
      "import { DebugLogger } from \"@utils/Logger\";",
      "",
      "const log = DebugLogger(\"$1$TM_FILENAME\");"
    ],
    "description": "Add debuglogger"
  },
  "Import CONFIG": {
    "prefix": "con",
    "body": ["import CONFIG from '@configuration'"]
  },
  "Layout helpers": {
    "prefix": "lay",
    "body": [
      "import { Layout } from \"@utils/Layout\";",
      "",
      "const { relativeX, relativeY, SCREEN_HEIGHT, SCREEN_WIDTH } = Layout"
    ],
    "description": "Add layout helpers"
  },
  "New View": {
    "prefix": "vie",
    "body": [
      "import React from \"react\";",
      "import { StyleSheet, View } from \"react-native\";",
      "",
      "export default function $TM_FILENAME_BASE() {",
      "  return (",
      "    <View>",
      "      $1",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  ",
      "});"
    ],
    "description": "New View"
  },
  "New view with children": {
    "prefix": "vic",
    "body": [
      "import React, { PropsWithChildren } from \"react\";",
      "import { StyleSheet, View } from \"react-native\";",
      "",
      "interface Props {}",
      "",
      "export default function $TM_FILENAME_BASE({ children}: PropsWithChildren<Props>) {",
      "  return (",
      "    <View>",
      "      $1",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  ",
      "});"
    ],
    "description": "New view with children"
  },
  "New Screen With Props": {
    "prefix": "scrp",
    "body": [
      "import React from 'react';",
      "import { StyleSheet } from 'react-native';",
      "import ScreenLayout from '@components/layouts/Screen.layout';",
      "",
      "export default function ${TM_FILENAME_BASE/\\.(.?)/${1:/upcase}/}(",
      "  // MainNavationtionProps.{Name of stack}<{Name of screen}>",
      "  props: MainNavigationProps.${TM_DIRECTORY/(.*\\/)(.*\\.)//}<'${TM_FILENAME_BASE/\\..*//}'>,",
      ") {",
      "  return (",
      "    <ScreenLayout>",
      "      $1",
      "    </ScreenLayout>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({});",
      ""
    ],
    "description": "New Screen With Props"
  },
  "New stylesheet": {
    "prefix": "sty",
    "body": ["", "const styles = StyleSheet.create({", "  $1", "});"],
    "description": "Add new stylesheet"
  },
  "Pan Responder": {
    "prefix": "pan",
    "body": [
      "const panResponder = React.useRef(",
      "  PanResponder.create({",
      "    // Ask to be the responder:",
      "    onStartShouldSetPanResponder: (evt, gestureState) => true,",
      "    onStartShouldSetPanResponderCapture: (evt, gestureState) => true,",
      "    onMoveShouldSetPanResponder: (evt, gestureState) => true,",
      "    onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,",
      "    onPanResponderGrant: (evt, gestureState) => {",
      "      // The gesture has started. Show visual feedback so the user knows",
      "      // what is happening!",
      "      // gestureState.d{x,y} will be set to zero now",
      "    },",
      "    onPanResponderMove: (evt, gestureState) => {",
      "      // The most recent move distance is gestureState.move{X,Y}",
      "      // The accumulated gesture distance since becoming responder is",
      "      // gestureState.d{x,y}",
      "    },",
      "    onPanResponderTerminationRequest: (evt, gestureState) => true,",
      "    onPanResponderRelease: (evt, gestureState) => {",
      "      // The user has released all touches while this view is the",
      "      // responder. This typically means a gesture has succeeded",
      "    },",
      "    onPanResponderTerminate: (evt, gestureState) => {",
      "      // Another component has become the responder, so this gesture",
      "      // should be cancelled",
      "    },",
      "    onShouldBlockNativeResponder: (evt, gestureState) => {",
      "      // Returns whether this component should block native components from becoming the JS",
      "      // responder. Returns true by default. Is currently only supported on android.",
      "      return true;",
      "    },",
      "  })",
      ").current;"
    ]
  }
}
