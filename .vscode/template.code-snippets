{
  "Debug Logger": {
    "prefix": "deb",
    "body": [
      "import { DebugLogger } from \"@utils/Logger\";",
      "",
      "const log = DebugLogger(\"$1$TM_FILENAME\");"
    ],
    "description": "Add debuglogger"
  },
  "Import CONFIG": {
    "prefix": "con",
    "body": ["import CONFIG from '@configuration'"]
  },
  "Layout helpers": {
    "prefix": "lay",
    "body": [
      "import { Layout } from \"@utils/Layout\";",
      "",
      "const { relativeX, relativeY, SCREEN_HEIGHT, SCREEN_WIDTH } = Layout"
    ],
    "description": "Add layout helpers"
  },
  "New View": {
    "prefix": "vie",
    "body": [
      "import React from \"react\";",
      "import { StyleSheet, View } from \"react-native\";",
      "",
      "export default function ${TM_FILENAME_BASE/\\.(.?)/${1:/upcase}/}() {",
      "  return (",
      "    <View>",
      "      $1",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  ",
      "});"
    ],
    "description": "New View"
  },
  "New view with children": {
    "prefix": "vic",
    "body": [
      "import React, { PropsWithChildren } from \"react\";",
      "import { StyleSheet, View } from \"react-native\";",
      "",
      "interface Props {}",
      "",
      "export default function ${TM_FILENAME_BASE/\\.(.?)/${1:/upcase}/}({ children}: PropsWithChildren<Props>) {",
      "  return (",
      "    <View>",
      "      $1",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  ",
      "});"
    ],
    "description": "New view with children"
  },
  "New Screen With Props": {
    "prefix": "scrp",
    "body": [
      "import React from 'react';",
      "import { StyleSheet } from 'react-native';",
      "import ScreenLayout from '@components/layouts/Screen.layout';",
      "",
      "export default function ${TM_FILENAME_BASE/\\.(.?)/${1:/upcase}/}(",
      "  // MainNavationtionProps.{Name of stack}<{Name of screen}>",
      "  props: MainNavigationProps.${TM_DIRECTORY/(.*\\/)//}<'${TM_FILENAME_BASE/\\..*//}'>,",
      ") {",
      "  return (",
      "    <ScreenLayout>",
      "      $1",
      "    </ScreenLayout>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({});",
      ""
    ],
    "description": "New Screen With Props"
  },
  "Creates a new stack navigator": {
    "prefix": "stack",
    "body": [
      "import React from 'react';",
      "import { createStackNavigator } from '@react-navigation/stack';",
      "import { theme } from '@utils/themes';",
      "",
      "const ${TM_FILENAME_BASE/\\..*//}Stack = createStackNavigator<${TM_FILENAME_BASE/\\..*//}StackParamList>();",
      "",
      "export default function ${TM_FILENAME_BASE/\\..*//}StackScreens() {",
      "  return (",
      "    <${TM_FILENAME_BASE/\\..*//}Stack.Navigator",
      "      screenOptions={{",
      "        headerStyle: {",
      "          backgroundColor: theme.background,",
      "        },",
      "        headerTitleStyle: {",
      "          color: theme.typeface.primary,",
      "        },",
      "      }}",
      "      initialRouteName=\"Default\"",
      "      id=\"${TM_FILENAME_BASE/\\..*//}Stack\">",
      "       <${TM_FILENAME_BASE/\\..*//}Stack.Screen name=\"Default\" component={$1} />",
      "    </${TM_FILENAME_BASE/\\..*//}Stack.Navigator>",
      "  );",
      "}",
      ""
    ],
    "description": "Creates a new stack navigator"
  },
  "Creates a new animated component": {
    "prefix": "anim",
    "body": [
      "import React, { PropsWithChildren, useEffect, useRef } from 'react';",
      "import { Animated, Easing, StyleSheet, View } from 'react-native';",
      "import { relativeX, relativeY } from '@utils/constants/Layout.const';",
      "import { theme } from '@utils/themes';",
      "",
      "interface Props {}",
      "",
      "export default function ${TM_FILENAME_BASE/\\..*//}(props: PropsWithChildren<Props>) {",
      "  const translateX = useRef(new Animated.Value(0)).current;",
      "",
      "  const slide = Animated.timing(translateX, {",
      "    useNativeDriver: true,",
      "    toValue: 1,",
      "    duration: 200,",
      "    easing: Easing.ease,",
      "  });",
      "",
      "  const transform = [{ translateX }];",
      "",
      "  useEffect(() => {",
      "    slide.start();",
      "  }, []);",
      "",
      "  return (",
      "    <Animated.View style={[{ transform }, styles.container]}>",
      "      <View",
      "        style={[styles.component, { backgroundColor: theme.primary.dark }]}",
      "      />",
      "    </Animated.View>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    position: 'absolute',",
      "    top: 0,",
      "    display: 'flex',",
      "    justifyContent: 'center',",
      "    flexDirection: 'row',",
      "  },",
      "  component: {",
      "    height: relativeY(5),",
      "    width: relativeX(10),",
      "  },",
      "});"
    ],
    "description": "Creates a new animated component"
  },
  "Creates a new reanimated effect": {
    "prefix": "rean",
    "body": [
      "import {",
      "  useSharedValue,",
      "  withTiming,",
      "  useAnimatedStyle,",
      "  Easing,",
      "  withSpring,",
      "} from 'react-native-reanimated';",
      "import { AnimationProps } from './Animation.types';",
      "",
      "export default function use${TM_FILENAME_BASE/(.)([^.]*).*/${1:/upcase}${2:/lowcase}/g}Animation(props: AnimationProps) {",
      "  const ${TM_FILENAME_BASE/\\..*//} = useSharedValue(props.sharedValue || 1);",
      "  let withAnimation: any = withTiming;",
      "  if (props.springConfig) withAnimation = withSpring;",
      "",
      "  const config = props.springConfig",
      "    ? props.springConfig",
      "    : {",
      "        duration: props.timingConfig?.duration || 220,",
      "        easing: props.timingConfig?.easing || Easing.bezier(0.5, 0.01, 0, 1),",
      "      };",
      "",
      "  return {",
      "    ${TM_FILENAME_BASE/\\..*//}: withAnimation(${TM_FILENAME_BASE/\\..*//}.value, config) as number,",
      "    ${TM_FILENAME_BASE/\\..*//}SharedValue: ${TM_FILENAME_BASE/\\..*//},",
      "  };",
      "}",
      ""
    ],
    "description": "Creates a new reanimated effect"
  },
  "Create Action Creator": {
    "prefix": "acr",
    "body": [
      "import { Dispatch } from \"redux\";",
      "import { ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Action} from \"@store/actions\";",
      "import { ${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}ActionType } from \"@store/actionTypes\";",
      "",
      "export default function ${TM_FILENAME_BASE/\\..*//}(){",
      "  return async function (dispatch: Dispatch<${TM_DIRECTORY/.*\\/(.)/${1:/upcase}/}Action>){",
      "    $1",
      "  }",
      "}",
      ""
    ],
    "description": "Create Action Creator"
  },
  "New stylesheet": {
    "prefix": "sty",
    "body": ["", "const styles = StyleSheet.create({", "  $1", "});"],
    "description": "Add new stylesheet"
  },
  "Pan Responder": {
    "prefix": "pan",
    "body": [
      "const panResponder = React.useRef(",
      "  PanResponder.create({",
      "    // Ask to be the responder:",
      "    onStartShouldSetPanResponder: (evt, gestureState) => true,",
      "    onStartShouldSetPanResponderCapture: (evt, gestureState) => true,",
      "    onMoveShouldSetPanResponder: (evt, gestureState) => true,",
      "    onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,",
      "    onPanResponderGrant: (evt, gestureState) => {",
      "      // The gesture has started. Show visual feedback so the user knows",
      "      // what is happening!",
      "      // gestureState.d{x,y} will be set to zero now",
      "    },",
      "    onPanResponderMove: (evt, gestureState) => {",
      "      // The most recent move distance is gestureState.move{X,Y}",
      "      // The accumulated gesture distance since becoming responder is",
      "      // gestureState.d{x,y}",
      "    },",
      "    onPanResponderTerminationRequest: (evt, gestureState) => true,",
      "    onPanResponderRelease: (evt, gestureState) => {",
      "      // The user has released all touches while this view is the",
      "      // responder. This typically means a gesture has succeeded",
      "    },",
      "    onPanResponderTerminate: (evt, gestureState) => {",
      "      // Another component has become the responder, so this gesture",
      "      // should be cancelled",
      "    },",
      "    onShouldBlockNativeResponder: (evt, gestureState) => {",
      "      // Returns whether this component should block native components from becoming the JS",
      "      // responder. Returns true by default. Is currently only supported on android.",
      "      return true;",
      "    },",
      "  })",
      ").current;"
    ]
  }
}
